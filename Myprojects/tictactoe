import itertools

def win(current_game):
    def allsame(l):
        if(l.count(l[0])==len(l) and l[0]!=0):
            return True
        else:
            return False
    for row in game:#Code for horizontal winner
        if(allsame(row)):
            print("Player",row[0],"is the winner horizontally")
            return True
    
    for col in range(0,len(game[0])):#Code for vertical winner
        check=[]
        for row in game:
            check.append(row[col])
        if(allsame(check)):
            print("Player",check[0],"is the winner vertically")
            return True
    diags=[]
    for col in range(1,len(game[0])):#Code for diagonal winner1
        diags.append(game[col][col])
    if(allsame(diags)):
        print("Player",diags[0],"is the winner diagonally")
        return True
    diag2=[]            
    for i in reversed(game):#Code for diagonal winner2
        diag2.append(i)
    diag3=[]
    for col in range(1,len(diag2[0])):
        diag3.append(diag2[col][col])
    if(allsame(diag3)):
        print("Player",diag3[0],"is the winner diagonally")
        return True
    return False # Nobody wins
#win(game)


def game_board(game_map, player=0, row=0, column=0, just_display=False):
    try:
        if(game_map[row][column]!=0):
            print("This position is occipied, please choose another position")
            return game_map,False   # doing this as if anything returned false, that will not change game_map 
        print("   0  1  2")
        if not just_display:
            game_map[row][column] = player
        for count, row in enumerate(game_map):
            print(count, row)
        return game_map,True
    except IndexError:
        print("Did you attempt to play a row or column outside the range of 0,1 or 2? (IndexError)")
        return game_map,False
    except Exception as e:
        print(str(e))
        return game_map,False


#game = game_board(game, player=1, row=3, column=1)

play=True
player=[1,2]
while(play):
    game=[[0,0,0],
          [0,0,0],
          [0,0,0]]
    game_won=False
    game,_ = game_board(game, just_display=True) # Displaying the board everytime , _ is used to ignore any return value
    player_choice=itertools.cycle([1,2]) # Iterations between two players
    while not game_won:
        current_player=next(player_choice)
        print("Current Player:",current_player)
        played=False     # switch the blocks between player one and two 
        
        while not played:
          column_choice=int(input("What column do you want to play(0,1,2):  "))
          row_choice=int(input("What row do you want to play(0,1,2):  "))
          game,played=game_board(game, player=current_player, row=row_choice, column=column_choice)
          

        if(win(game)):
            game_won=True
            again=input("The game is over , would you lie to play again: Y/N  ")
            if(again.lower()=="Y"):
                print("restarting")
            else:
                print("Thankyou for playing. BYe")
                play=False
            
                
            
